- args:
    sql: CREATE EXTENSION IF NOT EXISTS pgcrypto;
  type: run_sql
- args:
    sql: "CREATE TABLE \"public\".\"receipts\"(\"id\" uuid NOT NULL DEFAULT gen_random_uuid(),
      \"number\" serial NOT NULL, \"user_id\" text NOT NULL, \"file_url\" text NOT
      NULL, \"amount_cents\" integer NOT NULL, \"date\" date NOT NULL, \"pay_to_name\"
      text, \"pay_to_iban\" text, \"pay_to_notes\" text, \"includes_personal_info\"
      boolean NOT NULL, \"is_legally_compliant\" boolean, \"paper_copy_received\"
      boolean, \"has_been_paid\" boolean, \"tax_category_id\" uuid, \"created_at\"
      timestamptz NOT NULL DEFAULT now(), \"updated_at\" timestamptz NOT NULL DEFAULT
      now(), PRIMARY KEY (\"id\") , FOREIGN KEY (\"tax_category_id\") REFERENCES \"public\".\"tax_categories\"(\"id\")
      ON UPDATE restrict ON DELETE restrict, UNIQUE (\"number\"));\nCREATE OR REPLACE
      FUNCTION \"public\".\"set_current_timestamp_updated_at\"()\nRETURNS TRIGGER
      AS $$\nDECLARE\n  _new record;\nBEGIN\n  _new := NEW;\n  _new.\"updated_at\"
      = NOW();\n  RETURN _new;\nEND;\n$$ LANGUAGE plpgsql;\nCREATE TRIGGER \"set_public_receipts_updated_at\"\nBEFORE
      UPDATE ON \"public\".\"receipts\"\nFOR EACH ROW\nEXECUTE PROCEDURE \"public\".\"set_current_timestamp_updated_at\"();\nCOMMENT
      ON TRIGGER \"set_public_receipts_updated_at\" ON \"public\".\"receipts\" \nIS
      'trigger to set value of column \"updated_at\" to current timestamp on row update';\n"
  type: run_sql
- args:
    name: receipts
    schema: public
  type: add_existing_table_or_view
